name: Sync Assigned Issues to Target Project

on:
  workflow_dispatch:
  #schedule:
  #  - cron: '0 0 * * *' # Run every day at midnight UTC

jobs:
  sync_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install @actions/github

      - name: Sync Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          const { Octokit } = require("@octokit/core");

          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          const targetProjectId = '6';
          const sourceProjectIds = ['1', '2'];
          // Replace with your list of assignees
          const assigneesToSync = ["a-camarillo", "jennaxiao3", "aqvilala", "raymondOT", "jshii117", "lilyxmeng", "razlze", "leafie8"]; 
          
          const getIssuesWithAssignees = async (projectId) => {
            const response = await octokit.request('GET /projects/{projectId}/columns', {
              projectId,
              mediaType: {
                previews: ["inertia"],
              },
            });

            const columnId = response.data[0].id;

            const cardsResponse = await octokit.request('GET /projects/columns/{columnId}/cards', {
              columnId,
              mediaType: {
                previews: ["inertia"],
              },
            });

            const issues = await Promise.all(cardsResponse.data.map(async (card) => {
              const issueResponse = await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}', {
                owner: card.content_url.split('/')[4],
                repo: card.content_url.split('/')[5],
                issue_number: card.content_url.split('/')[7],
              });
              
              return issueResponse.data;
            }));

            return issues.filter((issue) =>
              assigneesToSync.includes(issue.assignee?.login)
            );
          };

          const syncIssues = async (issues, projectId) => {
            for (const issue of issues) {
              await octokit.request('POST /projects/columns/{columnId}/cards', {
                columnId: projectId,
                content_id: issue.number,
                content_type: 'Issue',
              });
            }
          };

          for (const projectId of sourceProjectIds) {
            const issues = await getIssuesWithAssignees(projectId);
            await syncIssues(issues, targetProjectId);
          }

